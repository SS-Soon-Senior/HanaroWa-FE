/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/member/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 전화번호, 생일등록(회원가입 중) */
        post: operations["info"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/member/branch/{branchId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 지점 선택하기/수정 API
         * @description 하나로와 내 지점을 선택/수정합니다.
         */
        post: operations["updateBranch"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lesson/{lessonGisuId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 강좌 수강 신청
         * @description 사용자가 특정 강좌 기수에 대한 수강을 신청합니다.
         */
        post: operations["applyForLesson"];
        /**
         * 강의 예약 취소
         * @description 강의 예약을 취소합니다.
         */
        delete: operations["deleteLessonReservation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lesson/{lessonGisuId}/review": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 강좌 기수 리뷰 작성
         * @description 사용자가 특정 강좌 기수에 대한 리뷰를 작성합니다.
         */
        post: operations["createReview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lesson/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 강좌 개설
         * @description 사용자가 새로운 강좌를 개설합니다.
         */
        post: operations["createLesson"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lesson/check/availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 시간대 사용 가능 여부 확인
         * @description 강좌 개설 전 해당 시간대에 사용 가능한 강의실이 있는지 확인합니다.
         */
        post: operations["checkTimeAvailability"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/facility/reservation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 시설 예약 목록 조회
         * @description 시설 예약 목록을 조회합니다.
         */
        get: operations["getAllMyFacilityReservations"];
        put?: never;
        /**
         * 시설 예약하기
         * @description 시설을 예약합니다.
         */
        post: operations["reservateFacility"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 일반 회원가입 */
        post: operations["signup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/signout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 로그아웃
         * @description 사용자 로그아웃 처리 및 쿠키 삭제
         */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/signin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 일반 로그인 */
        post: operations["signin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/reissue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 토큰 재발급 */
        post: operations["refresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/recommend-jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** AI 직업 추천 받기 */
        post: operations["getJobRecommendations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/recommend-courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** AI 강좌 추천 받기 */
        post: operations["getCourseRecommendations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/member": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 멤버 정보 반환 */
        get: operations["getInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** 회원 정보 수정(회원가입 후) */
        patch: operations["modifyInfo"];
        trace?: never;
    };
    "/member/withdraw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** 회원탈퇴 */
        patch: operations["withDraw"];
        trace?: never;
    };
    "/member/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** 비밀번호 수정 */
        patch: operations["modifyPassword"];
        trace?: never;
    };
    "/admin/lesson/{lessonId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 관리자 강좌 상세 보기 */
        get: operations["getLessonDetail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** 관리자 강좌 상세 수정하기 */
        patch: operations["updateLessonDetail"];
        trace?: never;
    };
    "/admin/lesson/{lessonGisuId}/state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** 강좌 개설 신청 상태 변경 (승인/거절) */
        patch: operations["updateLessonState"];
        trace?: never;
    };
    "/admin/lesson/gisu/{lessonGisuId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 관리자 기수 상세 조회 */
        get: operations["getLessonGisuDetail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** 관리자 기수 정보 수정 */
        patch: operations["updateLessonGisu"];
        trace?: never;
    };
    "/member/branch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 자신의 지점 조회 API
         * @description 로그인한 회원의 지점 정보를 조회합니다.
         */
        get: operations["getMyBranch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lesson/{lessonId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 사용자 강좌 상세 보기 */
        get: operations["getLessonDetail_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lesson/reservation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 내 예약 목록 가져오기 */
        get: operations["getAllOfferedLessons"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lesson/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 전체 강좌 검색
         * @description 사용자가 강좌 목록 검색 조회합니다.
         */
        get: operations["getLessonListSearch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lesson/list/{branchId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 지점별 카테고리별 강좌 목록 가져오기
         * @description 사용자가 지점별 카테고리별 강좌 목록 최신순으로 가져오기 조회합니다.
         */
        get: operations["getLessonListByBranchId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/facility/{facilityId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 시설 상세보기
         * @description 시설 상세를 조회합니다.
         */
        get: operations["getDetailFacility"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/facility/branch/{branchId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 지점별 시설 목록 API
         * @description 선택한 branchId로 시설 목록을 조회합니다.
         */
        get: operations["getFacilityByBranchId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/branch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 지점 목록 조회 API
         * @description 하나로와에서 이용할 수 있는 지점을 조회합니다.
         */
        get: operations["getBranches"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/signin/naver": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Naver 소셜 로그인
         * @description Naver 계정으로 로그인
         */
        get: operations["naverLogin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/signin/kakao": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Kakao 소셜 로그인
         * @description Kakao 계정으로 로그인
         */
        get: operations["kakaoLogin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/signin/google": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Google 소셜 로그인
         * @description Google 계정으로 로그인
         */
        get: operations["googleLogin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/member": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 관리자 회원 목록 */
        get: operations["getAdminAllMembers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/lesson": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 강좌 개설 신청 내역 */
        get: operations["getAdminAllLessons"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/lesson/{lessonGisuId}/member": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 관리자 강좌별 신청 회원 현황 */
        get: operations["getLessonMembers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/lesson/manage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 관리자 강좌 관리 목록 */
        get: operations["getManageLessons"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/facility": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 시설 예약 내역 API
         * @description 모든 시설 예약 내역을 최신순으로 조회합니다.
         */
        get: operations["getAdminFacilityList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/facility/{reservationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 시설 예약 취소
         * @description 시설 예약을 취소합니다.
         */
        delete: operations["deleteFacilityReservation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/facility/{reservationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 시설 예약 내역 취소 API
         * @description 시설 예약 내역을 관리자가 취소합니다.
         */
        delete: operations["deleteAdminFacilityTime"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        MemberInfoRequestDTO: {
            birth?: string;
            phoneNumber?: string;
        };
        ApiResponseVoid: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: unknown;
        };
        ApiResponseString: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: string;
        };
        ReviewRequestDTO: {
            /** Format: int32 */
            rating: number;
            reviewTxt: string;
        };
        CreateCurriculumRequestDTO: {
            content: string;
        };
        CreateLessonGisuRequestDTO: {
            /** Format: int32 */
            capacity: number;
            /** Format: int32 */
            lessonFee: number;
            duration: string;
            /** Format: int64 */
            lessonRoomId: number;
            /** @enum {string} */
            state?: "PENDING" | "APPROVED" | "REJECTED";
            curriculums: components["schemas"]["CreateCurriculumRequestDTO"][];
        };
        CreateLessonRequestDTO: {
            lessonName: string;
            instructor: string;
            instruction: string;
            description: string;
            /** @enum {string} */
            category: "DIGITAL" | "LANGUAGE" | "TREND" | "OTHERS" | "FINANCE" | "HEALTH" | "CULTURE";
            /** Format: binary */
            lessonImg?: string;
            /** Format: int64 */
            branchId: number;
            lessonGisus: components["schemas"]["CreateLessonGisuRequestDTO"][];
        };
        TimeAvailabilityRequestDTO: {
            /** Format: int64 */
            branchId: number;
            duration: string;
        };
        ApiResponseTimeAvailabilityResponseDTO: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: components["schemas"]["TimeAvailabilityResponseDTO"];
        };
        TimeAvailabilityResponseDTO: {
            available?: boolean;
            /** Format: int32 */
            availableRoomsCount?: number;
            timeSlots?: components["schemas"]["TimeSlotAvailability"][];
        };
        TimeSlotAvailability: {
            /** Format: date-time */
            startTime?: string;
            /** Format: date-time */
            endTime?: string;
            available?: boolean;
            /** Format: int32 */
            availableRoomsCount?: number;
        };
        FacilityReservationDTO: {
            /** Format: int64 */
            facilityId?: number;
            reservationDate?: string;
            startTime?: string;
            endTime?: string;
        };
        MemberRegistRequestDTO: {
            name?: string;
            email: string;
            password: string;
        };
        ApiResponseLoginResponseDTO: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: components["schemas"]["LoginResponseDTO"];
        };
        BranchResponseDTO: {
            /** Format: int64 */
            branchId?: number;
            locationName?: string;
            branchName?: string;
        };
        LoginResponseDTO: {
            url?: string;
            tokens?: components["schemas"]["TokenResponseDTO"];
            branch?: components["schemas"]["BranchResponseDTO"];
            name?: string;
            /** Format: date */
            birth?: string;
            phoneNumber?: string;
        };
        TokenResponseDTO: {
            email?: string;
            accessToken?: string;
            refreshToken?: string;
        };
        LoginRequestDTO: {
            email: string;
            password: string;
        };
        /** @description AI 직업 추천 요청 DTO */
        JobRecRequestDto: {
            /**
             * @description 사용자의 이전 경험 또는 경력
             * @example 사무직으로 20년 근무
             */
            experience?: string;
        };
        ApiResponseRecResponseDto: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: components["schemas"]["RecResponseDto"];
        };
        /** @description AI 추천 응답 DTO */
        RecResponseDto: {
            /** @description AI가 추천한 강좌 목록 */
            recommendations?: components["schemas"]["Recommendation"][];
        };
        /** @description AI 추천 상세 정보 */
        Recommendation: {
            /** @description 추천 타이틀 */
            name?: string;
            /** @description 해당되는 설명 */
            description?: string;
            /** @description 추천하는 이유 */
            reason?: string;
        };
        /** @description AI 강좌 추천 요청 DTO */
        CourseRecRequestDto: {
            /**
             * @description 사용자의 관심 분야
             * @example 스마트폰 활용
             */
            interest?: string;
        };
        ApiResponseMemberInfoRequestDTO: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: components["schemas"]["MemberInfoRequestDTO"];
        };
        ModifyPasswdRequestDTO: {
            currentPassword?: string;
            newPassword?: string;
        };
        UpdateCurriculumDTO: {
            /** Format: int64 */
            id: number;
            content: string;
        };
        UpdateLessonDetailRequestDTO: {
            lessonName: string;
            instructor: string;
            instruction: string;
            description: string;
            /** @enum {string} */
            category: "DIGITAL" | "LANGUAGE" | "TREND" | "OTHERS" | "FINANCE" | "HEALTH" | "CULTURE";
            lessonImg?: string;
            lessonGisus?: components["schemas"]["UpdateLessonGisuDTO"][];
        };
        UpdateLessonGisuDTO: {
            /** Format: int64 */
            id: number;
            /** Format: int32 */
            capacity: number;
            /** Format: int32 */
            lessonFee: number;
            duration: string;
            /** @enum {string} */
            lessonState: "PENDING" | "APPROVED" | "REJECTED";
            curriculums?: components["schemas"]["UpdateCurriculumDTO"][];
        };
        ApiResponseLessonDetailResponseDTO: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: components["schemas"]["LessonDetailResponseDTO"];
        };
        CurriculumResponseDTO: {
            /** Format: int64 */
            id?: number;
            content?: string;
        };
        LessonDetailResponseDTO: {
            lessonName?: string;
            instructor?: string;
            instruction?: string;
            description?: string;
            /** @enum {string} */
            category?: "DIGITAL" | "LANGUAGE" | "TREND" | "OTHERS" | "FINANCE" | "HEALTH" | "CULTURE";
            lessonImg?: string;
            lessonGisus?: components["schemas"]["LessonGisuResponseDTO"][];
        };
        LessonGisuResponseDTO: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            capacity?: number;
            /** Format: int32 */
            lessonFee?: number;
            duration?: string;
            /** @enum {string} */
            lessonState?: "PENDING" | "APPROVED" | "REJECTED";
            lessonRoom?: string;
            /** Format: int32 */
            currentEnrollment?: number;
            curriculums?: components["schemas"]["CurriculumResponseDTO"][];
        };
        LessonGisuStateUpdateRequestDto: {
            /** @enum {string} */
            lessonState: "PENDING" | "APPROVED" | "REJECTED";
        };
        ApiResponseLessonGisuStateUpdateResponseDto: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: components["schemas"]["LessonGisuStateUpdateResponseDto"];
        };
        LessonGisuStateUpdateResponseDto: {
            /** Format: int64 */
            lessonGisuId?: number;
            lessonState?: string;
        };
        UpdateLessonGisuRequestDTO: {
            lessonName: string;
            instructor: string;
            instruction: string;
            description: string;
            /** @enum {string} */
            category: "DIGITAL" | "LANGUAGE" | "TREND" | "OTHERS" | "FINANCE" | "HEALTH" | "CULTURE";
            lessonImg?: string;
            /** Format: int32 */
            capacity: number;
            /** Format: int32 */
            lessonFee: number;
            duration: string;
            /** @enum {string} */
            lessonState: "PENDING" | "APPROVED" | "REJECTED";
            curriculums?: components["schemas"]["UpdateCurriculumDTO"][];
        };
        ApiResponseLessonGisuDetailResponseDTO: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: components["schemas"]["LessonGisuDetailResponseDTO"];
        };
        LessonGisuDetailResponseDTO: {
            lessonName?: string;
            instructor?: string;
            instruction?: string;
            description?: string;
            category?: string;
            lessonImg?: string;
            /** Format: int32 */
            capacity?: number;
            /** Format: int32 */
            lessonFee?: number;
            duration?: string;
            /** @enum {string} */
            lessonState?: "PENDING" | "APPROVED" | "REJECTED";
            curriculums?: components["schemas"]["CurriculumResponseDTO"][];
        };
        ApiResponseMemberInfoResponseDTO: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: components["schemas"]["MemberInfoResponseDTO"];
        };
        MemberInfoResponseDTO: {
            name?: string;
            phone?: string;
            /** Format: date */
            birth?: string;
            provider?: string;
        };
        ApiResponseBranchResponseDTO: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: components["schemas"]["BranchResponseDTO"];
        };
        ApiResponseLessonMoreDetailResponseDTO: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: components["schemas"]["LessonMoreDetailResponseDTO"];
        };
        LessonMoreDetailResponseDTO: {
            lessonName?: string;
            instructor?: string;
            instruction?: string;
            description?: string;
            /** @enum {string} */
            category?: "DIGITAL" | "LANGUAGE" | "TREND" | "OTHERS" | "FINANCE" | "HEALTH" | "CULTURE";
            lessonImg?: string;
            reviews?: components["schemas"]["ReviewResponseDTO"][];
            /** Format: double */
            averageRating?: number;
            /** Format: int32 */
            totalReviews?: number;
            lessonGisus?: components["schemas"]["LessonGisuResponseDTO"][];
        };
        ReviewResponseDTO: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            rating?: number;
            reviewTxt?: string;
            memberName?: string;
            /** Format: int64 */
            lessonGisuId?: number;
        };
        ApiResponseMyReservationPageResponseDTO: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: components["schemas"]["MyReservationPageResponseDTO"];
        };
        LessonListResponseDTO: {
            /** Format: int64 */
            lessonId?: number;
            /** Format: int64 */
            lessonGisuId?: number;
            /** @enum {string} */
            lessonState?: "PENDING" | "APPROVED" | "REJECTED";
            startedAt?: string;
            lessonName?: string;
            instructorName?: string;
            duration?: string;
            lessonRoomName?: string;
            reservedAt?: string;
            reviewed?: boolean;
            inProgress?: boolean;
            notStarted?: boolean;
        };
        MyOpenLessonListResponseDTO: {
            /** Format: int64 */
            lessonId?: number;
            /** Format: int64 */
            lessonGisuId?: number;
            /** @enum {string} */
            lessonState?: "PENDING" | "APPROVED" | "REJECTED";
            startedAt?: string;
            lessonName?: string;
            instructorName?: string;
            lessonRoomName?: string;
            openedAt?: string;
            inProgress?: boolean;
        };
        MyReservationPageResponseDTO: {
            myOpenLessonList?: components["schemas"]["MyOpenLessonListResponseDTO"][];
            lessonList?: components["schemas"]["LessonListResponseDTO"][];
        };
        ApiResponseListLessonListSearchResponseDTO: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: components["schemas"]["LessonListSearchResponseDTO"][];
        };
        LessonListSearchResponseDTO: {
            /** Format: int64 */
            branchId?: number;
            locationName?: string;
            branchName?: string;
            /** Format: int64 */
            lessonId?: number;
            /** Format: int64 */
            lessonGisuId?: number;
            lessonName?: string;
            instructor?: string;
            lessonImg?: string;
            duration?: string;
            /** Format: int32 */
            lessonFee?: number;
            /** Format: int32 */
            capacity?: number;
            /** Format: int32 */
            currentStudentCount?: number;
        };
        ApiResponseLessonListByBranchIdResponseDTO: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: components["schemas"]["LessonListByBranchIdResponseDTO"];
        };
        LessonInfoResponseDTO: {
            /** Format: int64 */
            lessonId?: number;
            /** Format: int64 */
            lessonGisuId?: number;
            lessonName?: string;
            instructor?: string;
            lessonImg?: string;
            duration?: string;
            /** Format: int32 */
            lessonFee?: number;
            /** Format: int32 */
            capacity?: number;
            /** Format: int32 */
            currentStudentCount?: number;
            /** @enum {string} */
            lessonCategory?: "DIGITAL" | "LANGUAGE" | "TREND" | "OTHERS" | "FINANCE" | "HEALTH" | "CULTURE";
        };
        LessonListByBranchIdResponseDTO: {
            /** Format: int64 */
            branchId?: number;
            locationName?: string;
            branchName?: string;
            lessons?: components["schemas"]["LessonInfoResponseDTO"][];
        };
        ApiResponseFacilityDetailResponseDTO: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: components["schemas"]["FacilityDetailResponseDTO"];
        };
        FacilityDetailResponseDTO: {
            /** Format: int64 */
            facilityId?: number;
            facilityName?: string;
            facilityDescription?: string;
            facilityImages?: components["schemas"]["FacilityImageResponseDTO"][];
            facilityTimes?: {
                [key: string]: string[];
            };
        };
        FacilityImageResponseDTO: {
            /** Format: int64 */
            facilityImgId?: number;
            imgUrl?: string;
        };
        ApiResponseListFacilityReservationResponseDTO: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: components["schemas"]["FacilityReservationResponseDTO"][];
        };
        FacilityReservationResponseDTO: {
            /** Format: int64 */
            reservationId?: number;
            facilityName?: string;
            branchName?: string;
            startedAt?: string;
            reservedAt?: string;
            isUsed?: boolean;
        };
        ApiResponseFacilityListResponseDTO: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: components["schemas"]["FacilityListResponseDTO"];
        };
        Branch: {
            /** Format: int64 */
            id?: number;
            name?: string;
            address?: string;
            telNumber?: string;
            location?: components["schemas"]["Location"];
        };
        Facility: {
            /** Format: int64 */
            id?: number;
            name?: string;
            description?: string;
            branch?: components["schemas"]["Branch"];
            facilityImages?: components["schemas"]["FacilityImage"][];
        };
        FacilityImage: {
            /** Format: int64 */
            id?: number;
            facilityImage?: string;
            facility?: components["schemas"]["Facility"];
        };
        FacilityListResponseDTO: {
            facilityName?: string;
            facilities?: components["schemas"]["FacilityResponseDTO"][];
        };
        FacilityResponseDTO: {
            /** Format: int64 */
            facilityId?: number;
            facilityName?: string;
            facilityDescription?: string;
            mainImage?: components["schemas"]["FacilityImage"];
        };
        Location: {
            /** Format: int64 */
            id?: number;
            name?: string;
            branches?: components["schemas"]["Branch"][];
        };
        ApiResponseListBranchResponseDTO: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: components["schemas"]["BranchResponseDTO"][];
        };
        ApiResponseListMemberListResponseDTO: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: components["schemas"]["MemberListResponseDTO"][];
        };
        MemberListResponseDTO: {
            name?: string;
            branch?: string;
            phone?: string;
            email?: string;
            /** Format: date-time */
            deletedAt?: string;
            /** Format: date */
            birth?: string;
        };
        AdminLessonListResponseDTO: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            lessonGisuId?: number;
            lessonName?: string;
            instructor?: string;
            lessonImg?: string;
            duration?: string;
            /** Format: int32 */
            participants?: number;
            /** Format: int32 */
            capacity?: number;
            /** Format: int32 */
            lessonFee?: number;
        };
        ApiResponseListAdminLessonListResponseDTO: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: components["schemas"]["AdminLessonListResponseDTO"][];
        };
        ApiResponseListLessonMemberResponseDTO: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: components["schemas"]["LessonMemberResponseDTO"][];
        };
        LessonMemberResponseDTO: {
            name?: string;
            branch?: string;
            phone?: string;
            email?: string;
            /** Format: date */
            birth?: string;
        };
        AdminManageLessonResponseDTO: {
            /** Format: int64 */
            id?: number;
            lessonName?: string;
            instructor?: string;
            description?: string;
            duration?: string;
            /** @enum {string} */
            state?: "PENDING" | "APPROVED" | "REJECTED";
        };
        ApiResponseListAdminManageLessonResponseDTO: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: components["schemas"]["AdminManageLessonResponseDTO"][];
        };
        AdminFacilityResponseDTO: {
            /** Format: int64 */
            reservationId?: number;
            facilityName?: string;
            memberName?: string;
            branchName?: string;
            startedAt?: string;
            reservedAt?: string;
            isUsed?: boolean;
        };
        ApiResponseListAdminFacilityResponseDTO: {
            isSuccess?: boolean;
            code?: string;
            message?: string;
            result?: components["schemas"]["AdminFacilityResponseDTO"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    info: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberInfoRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    updateBranch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                branchId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    applyForLesson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonGisuId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseString"];
                };
            };
        };
    };
    deleteLessonReservation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonGisuId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    createReview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonGisuId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReviewRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    createLesson: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["CreateLessonRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    checkTimeAvailability: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TimeAvailabilityRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTimeAvailabilityResponseDTO"];
                };
            };
        };
    };
    getAllMyFacilityReservations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListFacilityReservationResponseDTO"];
                };
            };
        };
    };
    reservateFacility: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FacilityReservationDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    signup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberRegistRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseLoginResponseDTO"];
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                accessToken?: string;
                refreshToken?: string;
            };
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseString"];
                };
            };
        };
    };
    signin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseLoginResponseDTO"];
                };
            };
        };
    };
    refresh: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                refreshToken?: string;
            };
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    getJobRecommendations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JobRecRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseRecResponseDto"];
                };
            };
        };
    };
    getCourseRecommendations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CourseRecRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseRecResponseDto"];
                };
            };
        };
    };
    getInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseMemberInfoResponseDTO"];
                };
            };
        };
    };
    modifyInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberInfoRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseMemberInfoRequestDTO"];
                };
            };
        };
    };
    withDraw: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    modifyPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ModifyPasswdRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseString"];
                };
            };
        };
    };
    getLessonDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseLessonDetailResponseDTO"];
                };
            };
        };
    };
    updateLessonDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateLessonDetailRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseLessonDetailResponseDTO"];
                };
            };
        };
    };
    updateLessonState: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonGisuId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LessonGisuStateUpdateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseLessonGisuStateUpdateResponseDto"];
                };
            };
        };
    };
    getLessonGisuDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonGisuId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseLessonGisuDetailResponseDTO"];
                };
            };
        };
    };
    updateLessonGisu: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonGisuId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateLessonGisuRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseLessonGisuDetailResponseDTO"];
                };
            };
        };
    };
    getMyBranch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseBranchResponseDTO"];
                };
            };
        };
    };
    getLessonDetail_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseLessonMoreDetailResponseDTO"];
                };
            };
        };
    };
    getAllOfferedLessons: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseMyReservationPageResponseDTO"];
                };
            };
        };
    };
    getLessonListSearch: {
        parameters: {
            query?: {
                query?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListLessonListSearchResponseDTO"];
                };
            };
        };
    };
    getLessonListByBranchId: {
        parameters: {
            query?: {
                categories?: string[];
            };
            header?: never;
            path: {
                branchId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseLessonListByBranchIdResponseDTO"];
                };
            };
        };
    };
    getDetailFacility: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                facilityId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseFacilityDetailResponseDTO"];
                };
            };
        };
    };
    getFacilityByBranchId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                branchId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseFacilityListResponseDTO"];
                };
            };
        };
    };
    getBranches: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListBranchResponseDTO"];
                };
            };
        };
    };
    naverLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    kakaoLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    googleLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAdminAllMembers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListMemberListResponseDTO"];
                };
            };
        };
    };
    getAdminAllLessons: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListAdminLessonListResponseDTO"];
                };
            };
        };
    };
    getLessonMembers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonGisuId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListLessonMemberResponseDTO"];
                };
            };
        };
    };
    getManageLessons: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListAdminManageLessonResponseDTO"];
                };
            };
        };
    };
    getAdminFacilityList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListAdminFacilityResponseDTO"];
                };
            };
        };
    };
    deleteFacilityReservation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    deleteAdminFacilityTime: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
}
